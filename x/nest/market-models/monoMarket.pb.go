// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nest/market-models/mono/monoMarket.proto

package market_models

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MonoItem defines an item on the mono marketplace, listed by a mono seller
type MonoItem struct {
	ItemId        uint64       `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	Title         string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SellerAddress string       `protobuf:"bytes,4,opt,name=sellerAddress,proto3" json:"sellerAddress,omitempty"`
	MinPrice      []types.Coin `protobuf:"bytes,5,rep,name=minPrice,proto3" json:"minPrice"`
	Collateral    []types.Coin `protobuf:"bytes,6,rep,name=collateral,proto3" json:"collateral"`
}

func (m *MonoItem) Reset()         { *m = MonoItem{} }
func (m *MonoItem) String() string { return proto.CompactTextString(m) }
func (*MonoItem) ProtoMessage()    {}
func (*MonoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_12b9bb8f9ac92196, []int{0}
}
func (m *MonoItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonoItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonoItem.Merge(m, src)
}
func (m *MonoItem) XXX_Size() int {
	return m.Size()
}
func (m *MonoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MonoItem.DiscardUnknown(m)
}

var xxx_messageInfo_MonoItem proto.InternalMessageInfo

func (m *MonoItem) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *MonoItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MonoItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MonoItem) GetSellerAddress() string {
	if m != nil {
		return m.SellerAddress
	}
	return ""
}

func (m *MonoItem) GetMinPrice() []types.Coin {
	if m != nil {
		return m.MinPrice
	}
	return nil
}

func (m *MonoItem) GetCollateral() []types.Coin {
	if m != nil {
		return m.Collateral
	}
	return nil
}

// MonoSellOrder defines the sell order placed by a seller in the mono marketplace
type MonoSellOrder struct {
	SellOrderId uint64 `protobuf:"varint,1,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	SellerId    uint64 `protobuf:"varint,2,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	ItemId      uint64 `protobuf:"varint,3,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *MonoSellOrder) Reset()         { *m = MonoSellOrder{} }
func (m *MonoSellOrder) String() string { return proto.CompactTextString(m) }
func (*MonoSellOrder) ProtoMessage()    {}
func (*MonoSellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_12b9bb8f9ac92196, []int{1}
}
func (m *MonoSellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonoSellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonoSellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonoSellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonoSellOrder.Merge(m, src)
}
func (m *MonoSellOrder) XXX_Size() int {
	return m.Size()
}
func (m *MonoSellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MonoSellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MonoSellOrder proto.InternalMessageInfo

func (m *MonoSellOrder) GetSellOrderId() uint64 {
	if m != nil {
		return m.SellOrderId
	}
	return 0
}

func (m *MonoSellOrder) GetSellerId() uint64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *MonoSellOrder) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

// MonoBuyOrder defines the buy order placed by a buyer in the mono Marketplace
type MonoBuyOrder struct {
	BuyOrderId uint64 `protobuf:"varint,1,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
	BuyerId    uint64 `protobuf:"varint,2,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	ItemId     uint64 `protobuf:"varint,3,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *MonoBuyOrder) Reset()         { *m = MonoBuyOrder{} }
func (m *MonoBuyOrder) String() string { return proto.CompactTextString(m) }
func (*MonoBuyOrder) ProtoMessage()    {}
func (*MonoBuyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_12b9bb8f9ac92196, []int{2}
}
func (m *MonoBuyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonoBuyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonoBuyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonoBuyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonoBuyOrder.Merge(m, src)
}
func (m *MonoBuyOrder) XXX_Size() int {
	return m.Size()
}
func (m *MonoBuyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MonoBuyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MonoBuyOrder proto.InternalMessageInfo

func (m *MonoBuyOrder) GetBuyOrderId() uint64 {
	if m != nil {
		return m.BuyOrderId
	}
	return 0
}

func (m *MonoBuyOrder) GetBuyerId() uint64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *MonoBuyOrder) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func init() {
	proto.RegisterType((*MonoItem)(nil), "crowlabs.epsilon.nest.marketmodels.mono.MonoItem")
	proto.RegisterType((*MonoSellOrder)(nil), "crowlabs.epsilon.nest.marketmodels.mono.MonoSellOrder")
	proto.RegisterType((*MonoBuyOrder)(nil), "crowlabs.epsilon.nest.marketmodels.mono.MonoBuyOrder")
}

func init() {
	proto.RegisterFile("nest/market-models/mono/monoMarket.proto", fileDescriptor_12b9bb8f9ac92196)
}

var fileDescriptor_12b9bb8f9ac92196 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x8b, 0xd3, 0x40,
	0x1c, 0x6d, 0x6c, 0xb6, 0xd6, 0x59, 0xf7, 0x32, 0x2c, 0x12, 0x7b, 0x18, 0x43, 0x11, 0xcc, 0x65,
	0x67, 0xa8, 0x1e, 0x3d, 0x88, 0xf5, 0x54, 0x64, 0x51, 0xe2, 0xcd, 0x93, 0xf9, 0xf3, 0xa3, 0x0e,
	0xce, 0xcc, 0xaf, 0xcc, 0x4c, 0xd5, 0xfd, 0x16, 0x7e, 0xac, 0x3d, 0xee, 0xd1, 0x93, 0x48, 0xfb,
	0x3d, 0x44, 0x26, 0x93, 0x0d, 0x11, 0x11, 0xbc, 0x84, 0xdf, 0x7b, 0xc9, 0xcb, 0xe3, 0x3d, 0x1e,
	0x29, 0x0c, 0x38, 0x2f, 0x74, 0x65, 0x3f, 0x81, 0xbf, 0xd0, 0xd8, 0x82, 0x72, 0x42, 0xa3, 0xc1,
	0xee, 0x71, 0xd9, 0xd1, 0x7c, 0x67, 0xd1, 0x23, 0x7d, 0xd2, 0x58, 0xfc, 0xa2, 0xaa, 0xda, 0x71,
	0xd8, 0x39, 0xa9, 0xd0, 0xf0, 0x20, 0xe5, 0x51, 0x1a, 0x95, 0x3c, 0x88, 0x16, 0xac, 0x41, 0xa7,
	0xd1, 0x89, 0xba, 0x72, 0x20, 0x3e, 0xaf, 0x6a, 0xf0, 0xd5, 0x4a, 0x34, 0x28, 0x4d, 0xfc, 0xd1,
	0xe2, 0x7c, 0x8b, 0x5b, 0xec, 0x4e, 0x11, 0xae, 0xc8, 0x2e, 0x7f, 0x25, 0x64, 0x7e, 0x89, 0x06,
	0x37, 0x1e, 0x34, 0x7d, 0x40, 0x66, 0xd2, 0x83, 0xde, 0xb4, 0x59, 0x92, 0x27, 0x45, 0x5a, 0xf6,
	0x88, 0x9e, 0x93, 0x13, 0x2f, 0xbd, 0x82, 0xec, 0x4e, 0x9e, 0x14, 0xf7, 0xca, 0x08, 0x68, 0x4e,
	0x4e, 0x5b, 0x70, 0x8d, 0x95, 0x3b, 0x2f, 0xd1, 0x64, 0xd3, 0xee, 0xdd, 0x98, 0xa2, 0x8f, 0xc9,
	0x99, 0x03, 0xa5, 0xc0, 0xbe, 0x6c, 0x5b, 0x0b, 0xce, 0x65, 0x69, 0xf7, 0xcd, 0x9f, 0x24, 0x7d,
	0x4e, 0xe6, 0x5a, 0x9a, 0xb7, 0x56, 0x36, 0x90, 0x9d, 0xe4, 0xd3, 0xe2, 0xf4, 0xe9, 0x43, 0x1e,
	0xb3, 0xf0, 0x90, 0x85, 0xf7, 0x59, 0xf8, 0x2b, 0x94, 0x66, 0x9d, 0x5e, 0xff, 0x78, 0x34, 0x29,
	0x07, 0x01, 0x7d, 0x41, 0x48, 0x83, 0x4a, 0x55, 0x1e, 0x6c, 0xa5, 0xb2, 0xd9, 0xff, 0xc9, 0x47,
	0x92, 0x25, 0x90, 0xb3, 0x90, 0xff, 0x1d, 0x28, 0xf5, 0xc6, 0xb6, 0x60, 0x43, 0x2c, 0x77, 0x0b,
	0x86, 0x26, 0xc6, 0x14, 0x5d, 0x90, 0x79, 0x4c, 0xb0, 0x69, 0xbb, 0x46, 0xd2, 0x72, 0xc0, 0xa3,
	0x0a, 0xa7, 0xe3, 0x0a, 0x97, 0x1f, 0xc8, 0xfd, 0x60, 0xb3, 0xde, 0x5f, 0x45, 0x17, 0x46, 0x48,
	0xdd, 0xdf, 0x83, 0xc9, 0x88, 0xa1, 0x19, 0xb9, 0x5b, 0xef, 0xaf, 0x46, 0x16, 0xb7, 0xf0, 0x5f,
	0x0e, 0xeb, 0xd7, 0xd7, 0x07, 0x96, 0xdc, 0x1c, 0x58, 0xf2, 0xf3, 0xc0, 0x92, 0x6f, 0x47, 0x36,
	0xb9, 0x39, 0xb2, 0xc9, 0xf7, 0x23, 0x9b, 0xbc, 0x5f, 0x6d, 0xa5, 0xff, 0xb8, 0xaf, 0x79, 0x83,
	0x5a, 0x84, 0x35, 0x5d, 0x84, 0x39, 0x89, 0x7e, 0x4e, 0xe2, 0xab, 0xf8, 0x7b, 0x8b, 0xf5, 0xac,
	0x5b, 0xc7, 0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x93, 0x51, 0x5d, 0xbe, 0xa8, 0x02, 0x00,
	0x00,
}

func (m *MonoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonoItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonoItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonoMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MinPrice) > 0 {
		for iNdEx := len(m.MinPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonoMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SellerAddress) > 0 {
		i -= len(m.SellerAddress)
		copy(dAtA[i:], m.SellerAddress)
		i = encodeVarintMonoMarket(dAtA, i, uint64(len(m.SellerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMonoMarket(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMonoMarket(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ItemId != 0 {
		i = encodeVarintMonoMarket(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MonoSellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonoSellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonoSellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		i = encodeVarintMonoMarket(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x18
	}
	if m.SellerId != 0 {
		i = encodeVarintMonoMarket(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x10
	}
	if m.SellOrderId != 0 {
		i = encodeVarintMonoMarket(dAtA, i, uint64(m.SellOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MonoBuyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonoBuyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonoBuyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		i = encodeVarintMonoMarket(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x18
	}
	if m.BuyerId != 0 {
		i = encodeVarintMonoMarket(dAtA, i, uint64(m.BuyerId))
		i--
		dAtA[i] = 0x10
	}
	if m.BuyOrderId != 0 {
		i = encodeVarintMonoMarket(dAtA, i, uint64(m.BuyOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonoMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonoMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MonoItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovMonoMarket(uint64(m.ItemId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMonoMarket(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMonoMarket(uint64(l))
	}
	l = len(m.SellerAddress)
	if l > 0 {
		n += 1 + l + sovMonoMarket(uint64(l))
	}
	if len(m.MinPrice) > 0 {
		for _, e := range m.MinPrice {
			l = e.Size()
			n += 1 + l + sovMonoMarket(uint64(l))
		}
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovMonoMarket(uint64(l))
		}
	}
	return n
}

func (m *MonoSellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOrderId != 0 {
		n += 1 + sovMonoMarket(uint64(m.SellOrderId))
	}
	if m.SellerId != 0 {
		n += 1 + sovMonoMarket(uint64(m.SellerId))
	}
	if m.ItemId != 0 {
		n += 1 + sovMonoMarket(uint64(m.ItemId))
	}
	return n
}

func (m *MonoBuyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuyOrderId != 0 {
		n += 1 + sovMonoMarket(uint64(m.BuyOrderId))
	}
	if m.BuyerId != 0 {
		n += 1 + sovMonoMarket(uint64(m.BuyerId))
	}
	if m.ItemId != 0 {
		n += 1 + sovMonoMarket(uint64(m.ItemId))
	}
	return n
}

func sovMonoMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonoMarket(x uint64) (n int) {
	return sovMonoMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MonoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinPrice = append(m.MinPrice, types.Coin{})
			if err := m.MinPrice[len(m.MinPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonoSellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonoSellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonoSellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderId", wireType)
			}
			m.SellOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonoMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonoBuyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonoBuyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonoBuyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyOrderId", wireType)
			}
			m.BuyOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			m.BuyerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonoMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonoMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonoMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonoMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonoMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonoMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonoMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonoMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonoMarket = fmt.Errorf("proto: unexpected end of group")
)
