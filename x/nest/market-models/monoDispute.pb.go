// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nest/market-models/mono/monoDispute.proto

package market_models

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Evidence defines evidence for a dispute/rebutal in the mono marketplace
type Evidence struct {
	EvidenceId   uint64 `protobuf:"varint,1,opt,name=evidenceId,proto3" json:"evidenceId,omitempty"`
	DisputeId    uint64 `protobuf:"varint,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	ExternalLink string `protobuf:"bytes,3,opt,name=externalLink,proto3" json:"externalLink,omitempty"`
}

func (m *Evidence) Reset()         { *m = Evidence{} }
func (m *Evidence) String() string { return proto.CompactTextString(m) }
func (*Evidence) ProtoMessage()    {}
func (*Evidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{0}
}
func (m *Evidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Evidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Evidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Evidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Evidence.Merge(m, src)
}
func (m *Evidence) XXX_Size() int {
	return m.Size()
}
func (m *Evidence) XXX_DiscardUnknown() {
	xxx_messageInfo_Evidence.DiscardUnknown(m)
}

var xxx_messageInfo_Evidence proto.InternalMessageInfo

func (m *Evidence) GetEvidenceId() uint64 {
	if m != nil {
		return m.EvidenceId
	}
	return 0
}

func (m *Evidence) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *Evidence) GetExternalLink() string {
	if m != nil {
		return m.ExternalLink
	}
	return ""
}

//Rebuttal defines the rebutal for a raised dispute in the mono marketplace
type Rebuttal struct {
	RebuttalId uint64    `protobuf:"varint,1,opt,name=rebuttalId,proto3" json:"rebuttalId,omitempty"`
	DisputeId  uint64    `protobuf:"varint,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Evidence   *Evidence `protobuf:"bytes,3,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *Rebuttal) Reset()         { *m = Rebuttal{} }
func (m *Rebuttal) String() string { return proto.CompactTextString(m) }
func (*Rebuttal) ProtoMessage()    {}
func (*Rebuttal) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{1}
}
func (m *Rebuttal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rebuttal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rebuttal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rebuttal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rebuttal.Merge(m, src)
}
func (m *Rebuttal) XXX_Size() int {
	return m.Size()
}
func (m *Rebuttal) XXX_DiscardUnknown() {
	xxx_messageInfo_Rebuttal.DiscardUnknown(m)
}

var xxx_messageInfo_Rebuttal proto.InternalMessageInfo

func (m *Rebuttal) GetRebuttalId() uint64 {
	if m != nil {
		return m.RebuttalId
	}
	return 0
}

func (m *Rebuttal) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *Rebuttal) GetEvidence() *Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

//Dispute defines a dispute over a mono markeplace exchange of physical goods
type Dispute struct {
	DiputeId    uint64    `protobuf:"varint,1,opt,name=diputeId,proto3" json:"diputeId,omitempty"`
	Title       string    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Evidence    *Evidence `protobuf:"bytes,4,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *Dispute) Reset()         { *m = Dispute{} }
func (m *Dispute) String() string { return proto.CompactTextString(m) }
func (*Dispute) ProtoMessage()    {}
func (*Dispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{2}
}
func (m *Dispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dispute.Merge(m, src)
}
func (m *Dispute) XXX_Size() int {
	return m.Size()
}
func (m *Dispute) XXX_DiscardUnknown() {
	xxx_messageInfo_Dispute.DiscardUnknown(m)
}

var xxx_messageInfo_Dispute proto.InternalMessageInfo

func (m *Dispute) GetDiputeId() uint64 {
	if m != nil {
		return m.DiputeId
	}
	return 0
}

func (m *Dispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Dispute) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dispute) GetEvidence() *Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

// FundDistribution defines a structure to divide distributed funds in
type FundDistribution struct {
	PlaintifAmount  []types.Coin `protobuf:"bytes,1,rep,name=plaintifAmount,proto3" json:"plaintifAmount"`
	DefendantAmount []types.Coin `protobuf:"bytes,2,rep,name=defendantAmount,proto3" json:"defendantAmount"`
}

func (m *FundDistribution) Reset()         { *m = FundDistribution{} }
func (m *FundDistribution) String() string { return proto.CompactTextString(m) }
func (*FundDistribution) ProtoMessage()    {}
func (*FundDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{3}
}
func (m *FundDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundDistribution.Merge(m, src)
}
func (m *FundDistribution) XXX_Size() int {
	return m.Size()
}
func (m *FundDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_FundDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_FundDistribution proto.InternalMessageInfo

func (m *FundDistribution) GetPlaintifAmount() []types.Coin {
	if m != nil {
		return m.PlaintifAmount
	}
	return nil
}

func (m *FundDistribution) GetDefendantAmount() []types.Coin {
	if m != nil {
		return m.DefendantAmount
	}
	return nil
}

// Sentence defines the outcome of a dispute
type Sentence struct {
	VoteId               uint64            `protobuf:"varint,1,opt,name=voteId,proto3" json:"voteId,omitempty"`
	PlaintifGuilty       bool              `protobuf:"varint,2,opt,name=plaintifGuilty,proto3" json:"plaintifGuilty,omitempty"`
	DefendantGuilty      bool              `protobuf:"varint,3,opt,name=defendantGuilty,proto3" json:"defendantGuilty,omitempty"`
	PlainttifBlacklisted bool              `protobuf:"varint,4,opt,name=plainttifBlacklisted,proto3" json:"plainttifBlacklisted,omitempty"`
	DefendantBlacklisted bool              `protobuf:"varint,5,opt,name=defendantBlacklisted,proto3" json:"defendantBlacklisted,omitempty"`
	FundDistr            *FundDistribution `protobuf:"bytes,6,opt,name=fundDistr,proto3" json:"fundDistr,omitempty"`
}

func (m *Sentence) Reset()         { *m = Sentence{} }
func (m *Sentence) String() string { return proto.CompactTextString(m) }
func (*Sentence) ProtoMessage()    {}
func (*Sentence) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{4}
}
func (m *Sentence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sentence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sentence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sentence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sentence.Merge(m, src)
}
func (m *Sentence) XXX_Size() int {
	return m.Size()
}
func (m *Sentence) XXX_DiscardUnknown() {
	xxx_messageInfo_Sentence.DiscardUnknown(m)
}

var xxx_messageInfo_Sentence proto.InternalMessageInfo

func (m *Sentence) GetVoteId() uint64 {
	if m != nil {
		return m.VoteId
	}
	return 0
}

func (m *Sentence) GetPlaintifGuilty() bool {
	if m != nil {
		return m.PlaintifGuilty
	}
	return false
}

func (m *Sentence) GetDefendantGuilty() bool {
	if m != nil {
		return m.DefendantGuilty
	}
	return false
}

func (m *Sentence) GetPlainttifBlacklisted() bool {
	if m != nil {
		return m.PlainttifBlacklisted
	}
	return false
}

func (m *Sentence) GetDefendantBlacklisted() bool {
	if m != nil {
		return m.DefendantBlacklisted
	}
	return false
}

func (m *Sentence) GetFundDistr() *FundDistribution {
	if m != nil {
		return m.FundDistr
	}
	return nil
}

// Vote defines the vote that is cast for a MonoDispute
type Vote struct {
	VoterId   uint64    `protobuf:"varint,1,opt,name=voterId,proto3" json:"voterId,omitempty"`
	DisputeId uint64    `protobuf:"varint,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	BuyerId   *Sentence `protobuf:"bytes,3,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{5}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetVoterId() uint64 {
	if m != nil {
		return m.VoterId
	}
	return 0
}

func (m *Vote) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *Vote) GetBuyerId() *Sentence {
	if m != nil {
		return m.BuyerId
	}
	return nil
}

func init() {
	proto.RegisterType((*Evidence)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Evidence")
	proto.RegisterType((*Rebuttal)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Rebuttal")
	proto.RegisterType((*Dispute)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Dispute")
	proto.RegisterType((*FundDistribution)(nil), "crowlabs.epsilon.nest.marketmodels.mono.FundDistribution")
	proto.RegisterType((*Sentence)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Sentence")
	proto.RegisterType((*Vote)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Vote")
}

func init() {
	proto.RegisterFile("nest/market-models/mono/monoDispute.proto", fileDescriptor_1be600aaa49bca9e)
}

var fileDescriptor_1be600aaa49bca9e = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x6f, 0xb6, 0x6e, 0x4d, 0xbf, 0x22, 0x40, 0x56, 0x85, 0x42, 0x85, 0x42, 0x95, 0x03, 0x94,
	0xc3, 0x1c, 0xb5, 0x9c, 0x38, 0x52, 0x06, 0x53, 0x35, 0xb8, 0x04, 0x09, 0x24, 0x6e, 0x49, 0xec,
	0x16, 0xab, 0x8e, 0x5d, 0xc5, 0x4e, 0xd9, 0x9e, 0x81, 0x0b, 0x37, 0xde, 0x80, 0x13, 0x57, 0xde,
	0x61, 0xc7, 0x1d, 0x39, 0x21, 0xd4, 0xbe, 0x08, 0x8a, 0x93, 0xb4, 0x5d, 0x99, 0xb4, 0x22, 0x2e,
	0x91, 0xfd, 0x73, 0x7e, 0x7f, 0xf2, 0x7d, 0x5f, 0x0c, 0x4f, 0x04, 0x55, 0xda, 0x4f, 0xc2, 0x74,
	0x4a, 0xf5, 0x51, 0x22, 0x09, 0xe5, 0xca, 0x4f, 0xa4, 0x90, 0xe6, 0x71, 0xcc, 0xd4, 0x2c, 0xd3,
	0x14, 0xcf, 0x52, 0xa9, 0x25, 0x7a, 0x1c, 0xa7, 0xf2, 0x13, 0x0f, 0x23, 0x85, 0xe9, 0x4c, 0x31,
	0x2e, 0x05, 0xce, 0xb9, 0xb8, 0xe0, 0x16, 0x54, 0x9c, 0xb3, 0x3a, 0x6e, 0x2c, 0x55, 0x22, 0x95,
	0x1f, 0x85, 0x8a, 0xfa, 0xf3, 0x7e, 0x44, 0x75, 0xd8, 0xf7, 0x63, 0xc9, 0x44, 0x21, 0xd4, 0x69,
	0x4f, 0xe4, 0x44, 0x9a, 0xa5, 0x9f, 0xaf, 0x0a, 0xd4, 0xe3, 0x60, 0xbf, 0x9c, 0x33, 0x42, 0x45,
	0x4c, 0x91, 0x0b, 0x40, 0xcb, 0xf5, 0x88, 0x38, 0x56, 0xd7, 0xea, 0xd5, 0x83, 0x0d, 0x04, 0x3d,
	0x80, 0x26, 0x29, 0xb2, 0x8d, 0x88, 0xb3, 0x67, 0x8e, 0xd7, 0x00, 0xf2, 0xe0, 0x16, 0x3d, 0xd3,
	0x34, 0x15, 0x21, 0x7f, 0xcd, 0xc4, 0xd4, 0xd9, 0xef, 0x5a, 0xbd, 0x66, 0x70, 0x05, 0xf3, 0xbe,
	0x5a, 0x60, 0x07, 0x34, 0xca, 0xb4, 0x0e, 0x79, 0x6e, 0x97, 0x96, 0xeb, 0xb5, 0xdd, 0x1a, 0xb9,
	0xc1, 0xee, 0x0d, 0xd8, 0x55, 0x34, 0x63, 0xd5, 0x1a, 0xf4, 0xf1, 0x8e, 0xa5, 0xc2, 0xd5, 0x17,
	0x07, 0x2b, 0x09, 0xef, 0xbb, 0x05, 0x8d, 0xb2, 0xf0, 0xa8, 0x03, 0x36, 0x61, 0xa5, 0x6f, 0x11,
	0x6b, 0xb5, 0x47, 0x6d, 0x38, 0xd0, 0x4c, 0x73, 0x6a, 0x02, 0x35, 0x83, 0x62, 0x83, 0xba, 0xd0,
	0x22, 0x54, 0xc5, 0x29, 0x9b, 0x69, 0x26, 0x45, 0xf9, 0xe9, 0x9b, 0xd0, 0x95, 0xb8, 0xf5, 0xff,
	0x8f, 0xfb, 0xcd, 0x82, 0xbb, 0xaf, 0x32, 0x41, 0x8e, 0x99, 0xd2, 0x29, 0x8b, 0x32, 0xe3, 0x71,
	0x02, 0xb7, 0x67, 0x3c, 0x64, 0x42, 0xb3, 0xf1, 0xf3, 0x44, 0x66, 0x42, 0x3b, 0x56, 0x77, 0xbf,
	0xd7, 0x1a, 0xdc, 0xc7, 0xc5, 0x68, 0xe0, 0x7c, 0x34, 0x70, 0x39, 0x1a, 0xf8, 0x85, 0x64, 0x62,
	0x58, 0xbf, 0xf8, 0xf5, 0xb0, 0x16, 0x6c, 0xd1, 0xd0, 0x08, 0xee, 0x10, 0x3a, 0xa6, 0x82, 0x84,
	0x42, 0x97, 0x4a, 0x7b, 0xbb, 0x29, 0x6d, 0xf3, 0xbc, 0x1f, 0x7b, 0x60, 0xbf, 0xa5, 0x42, 0x9b,
	0x01, 0xbb, 0x07, 0x87, 0x73, 0xb9, 0x51, 0xd6, 0x72, 0x87, 0x1e, 0xad, 0x83, 0x9f, 0x64, 0x8c,
	0xeb, 0x73, 0x53, 0x5d, 0x3b, 0xd8, 0x42, 0x51, 0x6f, 0x23, 0x57, 0xf9, 0xe2, 0xbe, 0x79, 0x71,
	0x1b, 0x46, 0x03, 0x68, 0x17, 0x5c, 0xcd, 0xc6, 0x43, 0x1e, 0xc6, 0x53, 0xce, 0x94, 0xa6, 0xc4,
	0x94, 0xde, 0x0e, 0xae, 0x3d, 0xcb, 0x39, 0x2b, 0x99, 0x4d, 0xce, 0x41, 0xc1, 0xb9, 0xee, 0x0c,
	0xbd, 0x87, 0xe6, 0xb8, 0x6a, 0x83, 0x73, 0x68, 0xfa, 0xfa, 0x6c, 0xe7, 0xbe, 0x6e, 0x37, 0x30,
	0x58, 0x6b, 0x79, 0x9f, 0x2d, 0xa8, 0xbf, 0x93, 0x9a, 0x22, 0x07, 0x1a, 0x79, 0x95, 0xd2, 0x55,
	0xd1, 0xaa, 0xed, 0x0d, 0xff, 0xc7, 0x29, 0x34, 0xa2, 0xec, 0xdc, 0xf0, 0xfe, 0xf5, 0xf7, 0xa8,
	0xfa, 0x15, 0x54, 0x0a, 0xc3, 0xd3, 0x8b, 0x85, 0x6b, 0x5d, 0x2e, 0x5c, 0xeb, 0xf7, 0xc2, 0xb5,
	0xbe, 0x2c, 0xdd, 0xda, 0xe5, 0xd2, 0xad, 0xfd, 0x5c, 0xba, 0xb5, 0x0f, 0xfd, 0x09, 0xd3, 0x1f,
	0xb3, 0x08, 0xc7, 0x32, 0xf1, 0x73, 0xfd, 0xa3, 0xdc, 0xc0, 0x2f, 0x0d, 0xfc, 0x33, 0xff, 0xef,
	0x8b, 0x2e, 0x3a, 0x34, 0x37, 0xcf, 0xd3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x79, 0xa1, 0x30,
	0x52, 0x05, 0x05, 0x00, 0x00,
}

func (m *Evidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Evidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Evidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalLink) > 0 {
		i -= len(m.ExternalLink)
		copy(dAtA[i:], m.ExternalLink)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.ExternalLink)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DisputeId != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if m.EvidenceId != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.EvidenceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rebuttal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rebuttal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rebuttal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Evidence != nil {
		{
			size, err := m.Evidence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonoDispute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DisputeId != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if m.RebuttalId != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.RebuttalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Evidence != nil {
		{
			size, err := m.Evidence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonoDispute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.DiputeId != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.DiputeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FundDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefendantAmount) > 0 {
		for iNdEx := len(m.DefendantAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefendantAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonoDispute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PlaintifAmount) > 0 {
		for iNdEx := len(m.PlaintifAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlaintifAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonoDispute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Sentence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sentence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sentence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FundDistr != nil {
		{
			size, err := m.FundDistr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonoDispute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DefendantBlacklisted {
		i--
		if m.DefendantBlacklisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.PlainttifBlacklisted {
		i--
		if m.PlainttifBlacklisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DefendantGuilty {
		i--
		if m.DefendantGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PlaintifGuilty {
		i--
		if m.PlaintifGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.VoteId != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.VoteId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BuyerId != nil {
		{
			size, err := m.BuyerId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonoDispute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DisputeId != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if m.VoterId != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.VoterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonoDispute(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonoDispute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Evidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EvidenceId != 0 {
		n += 1 + sovMonoDispute(uint64(m.EvidenceId))
	}
	if m.DisputeId != 0 {
		n += 1 + sovMonoDispute(uint64(m.DisputeId))
	}
	l = len(m.ExternalLink)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func (m *Rebuttal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RebuttalId != 0 {
		n += 1 + sovMonoDispute(uint64(m.RebuttalId))
	}
	if m.DisputeId != 0 {
		n += 1 + sovMonoDispute(uint64(m.DisputeId))
	}
	if m.Evidence != nil {
		l = m.Evidence.Size()
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func (m *Dispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiputeId != 0 {
		n += 1 + sovMonoDispute(uint64(m.DiputeId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	if m.Evidence != nil {
		l = m.Evidence.Size()
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func (m *FundDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlaintifAmount) > 0 {
		for _, e := range m.PlaintifAmount {
			l = e.Size()
			n += 1 + l + sovMonoDispute(uint64(l))
		}
	}
	if len(m.DefendantAmount) > 0 {
		for _, e := range m.DefendantAmount {
			l = e.Size()
			n += 1 + l + sovMonoDispute(uint64(l))
		}
	}
	return n
}

func (m *Sentence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteId != 0 {
		n += 1 + sovMonoDispute(uint64(m.VoteId))
	}
	if m.PlaintifGuilty {
		n += 2
	}
	if m.DefendantGuilty {
		n += 2
	}
	if m.PlainttifBlacklisted {
		n += 2
	}
	if m.DefendantBlacklisted {
		n += 2
	}
	if m.FundDistr != nil {
		l = m.FundDistr.Size()
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoterId != 0 {
		n += 1 + sovMonoDispute(uint64(m.VoterId))
	}
	if m.DisputeId != 0 {
		n += 1 + sovMonoDispute(uint64(m.DisputeId))
	}
	if m.BuyerId != nil {
		l = m.BuyerId.Size()
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func sovMonoDispute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonoDispute(x uint64) (n int) {
	return sovMonoDispute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Evidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Evidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Evidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceId", wireType)
			}
			m.EvidenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvidenceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rebuttal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rebuttal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rebuttal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebuttalId", wireType)
			}
			m.RebuttalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebuttalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evidence == nil {
				m.Evidence = &Evidence{}
			}
			if err := m.Evidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiputeId", wireType)
			}
			m.DiputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evidence == nil {
				m.Evidence = &Evidence{}
			}
			if err := m.Evidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaintifAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaintifAmount = append(m.PlaintifAmount, types.Coin{})
			if err := m.PlaintifAmount[len(m.PlaintifAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendantAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefendantAmount = append(m.DefendantAmount, types.Coin{})
			if err := m.DefendantAmount[len(m.DefendantAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sentence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sentence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sentence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			m.VoteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaintifGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlaintifGuilty = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendantGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefendantGuilty = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainttifBlacklisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlainttifBlacklisted = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendantBlacklisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefendantBlacklisted = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundDistr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FundDistr == nil {
				m.FundDistr = &FundDistribution{}
			}
			if err := m.FundDistr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			m.VoterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyerId == nil {
				m.BuyerId = &Sentence{}
			}
			if err := m.BuyerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonoDispute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonoDispute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonoDispute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonoDispute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonoDispute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonoDispute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonoDispute = fmt.Errorf("proto: unexpected end of group")
)
