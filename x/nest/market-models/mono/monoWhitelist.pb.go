// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nest/market-models/mono/monoWhitelist.proto

package mono

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Buyer defines a buyer in a marketplace where each listing has a quanity of one
type Buyer struct {
	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BuyerId          uint64   `protobuf:"varint,2,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	Status           string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Address          string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	ActiveOrderId    []uint64 `protobuf:"varint,5,rep,packed,name=activeOrderId,proto3" json:"activeOrderId,omitempty"`
	CompletedOrderId []uint64 `protobuf:"varint,6,rep,packed,name=completedOrderId,proto3" json:"completedOrderId,omitempty"`
	ContactInfo      string   `protobuf:"bytes,7,opt,name=contactInfo,proto3" json:"contactInfo,omitempty"`
}

func (m *Buyer) Reset()         { *m = Buyer{} }
func (m *Buyer) String() string { return proto.CompactTextString(m) }
func (*Buyer) ProtoMessage()    {}
func (*Buyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12d0fe489b48d8d, []int{0}
}
func (m *Buyer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Buyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Buyer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Buyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Buyer.Merge(m, src)
}
func (m *Buyer) XXX_Size() int {
	return m.Size()
}
func (m *Buyer) XXX_DiscardUnknown() {
	xxx_messageInfo_Buyer.DiscardUnknown(m)
}

var xxx_messageInfo_Buyer proto.InternalMessageInfo

func (m *Buyer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Buyer) GetBuyerId() uint64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *Buyer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Buyer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Buyer) GetActiveOrderId() []uint64 {
	if m != nil {
		return m.ActiveOrderId
	}
	return nil
}

func (m *Buyer) GetCompletedOrderId() []uint64 {
	if m != nil {
		return m.CompletedOrderId
	}
	return nil
}

func (m *Buyer) GetContactInfo() string {
	if m != nil {
		return m.ContactInfo
	}
	return ""
}

// Seller defines a seller in the mono marketplace
type Seller struct {
	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SellerId         uint64   `protobuf:"varint,2,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	Status           string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Address          string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	ActiveOrderId    []uint64 `protobuf:"varint,5,rep,packed,name=activeOrderId,proto3" json:"activeOrderId,omitempty"`
	ActiveItems      []*Item  `protobuf:"bytes,6,rep,name=activeItems,proto3" json:"activeItems,omitempty"`
	CompletedOrderId []uint64 `protobuf:"varint,7,rep,packed,name=completedOrderId,proto3" json:"completedOrderId,omitempty"`
	ContactInfo      string   `protobuf:"bytes,8,opt,name=contactInfo,proto3" json:"contactInfo,omitempty"`
}

func (m *Seller) Reset()         { *m = Seller{} }
func (m *Seller) String() string { return proto.CompactTextString(m) }
func (*Seller) ProtoMessage()    {}
func (*Seller) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12d0fe489b48d8d, []int{1}
}
func (m *Seller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Seller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Seller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Seller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Seller.Merge(m, src)
}
func (m *Seller) XXX_Size() int {
	return m.Size()
}
func (m *Seller) XXX_DiscardUnknown() {
	xxx_messageInfo_Seller.DiscardUnknown(m)
}

var xxx_messageInfo_Seller proto.InternalMessageInfo

func (m *Seller) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Seller) GetSellerId() uint64 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *Seller) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Seller) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Seller) GetActiveOrderId() []uint64 {
	if m != nil {
		return m.ActiveOrderId
	}
	return nil
}

func (m *Seller) GetActiveItems() []*Item {
	if m != nil {
		return m.ActiveItems
	}
	return nil
}

func (m *Seller) GetCompletedOrderId() []uint64 {
	if m != nil {
		return m.CompletedOrderId
	}
	return nil
}

func (m *Seller) GetContactInfo() string {
	if m != nil {
		return m.ContactInfo
	}
	return ""
}

// Voter defines a voter for the mono marketplace
type Voter struct {
	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VoterId        uint64  `protobuf:"varint,2,opt,name=voterId,proto3" json:"voterId,omitempty"`
	Status         string  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Address        string  `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	ActiveVotes    []*Vote `protobuf:"bytes,5,rep,name=activeVotes,proto3" json:"activeVotes,omitempty"`
	CompletedVotes []*Vote `protobuf:"bytes,6,rep,name=completedVotes,proto3" json:"completedVotes,omitempty"`
}

func (m *Voter) Reset()         { *m = Voter{} }
func (m *Voter) String() string { return proto.CompactTextString(m) }
func (*Voter) ProtoMessage()    {}
func (*Voter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12d0fe489b48d8d, []int{2}
}
func (m *Voter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Voter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Voter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Voter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Voter.Merge(m, src)
}
func (m *Voter) XXX_Size() int {
	return m.Size()
}
func (m *Voter) XXX_DiscardUnknown() {
	xxx_messageInfo_Voter.DiscardUnknown(m)
}

var xxx_messageInfo_Voter proto.InternalMessageInfo

func (m *Voter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Voter) GetVoterId() uint64 {
	if m != nil {
		return m.VoterId
	}
	return 0
}

func (m *Voter) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Voter) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Voter) GetActiveVotes() []*Vote {
	if m != nil {
		return m.ActiveVotes
	}
	return nil
}

func (m *Voter) GetCompletedVotes() []*Vote {
	if m != nil {
		return m.CompletedVotes
	}
	return nil
}

func init() {
	proto.RegisterType((*Buyer)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Buyer")
	proto.RegisterType((*Seller)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Seller")
	proto.RegisterType((*Voter)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Voter")
}

func init() {
	proto.RegisterFile("nest/market-models/mono/monoWhitelist.proto", fileDescriptor_d12d0fe489b48d8d)
}

var fileDescriptor_d12d0fe489b48d8d = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcd, 0x4a, 0xe3, 0x50,
	0x18, 0x6d, 0xda, 0x34, 0xed, 0xdc, 0x32, 0xc3, 0x70, 0x17, 0x43, 0xe8, 0x22, 0x84, 0x32, 0x30,
	0x99, 0x19, 0x7a, 0x03, 0x0a, 0x3e, 0x40, 0x71, 0xd3, 0x85, 0x54, 0x22, 0x2a, 0xb8, 0xcb, 0xcf,
	0xd5, 0x06, 0x93, 0xdc, 0x90, 0xfb, 0xa5, 0xea, 0x53, 0xe8, 0x9b, 0xf8, 0x1a, 0x2e, 0xbb, 0x14,
	0xdc, 0x48, 0xfb, 0x22, 0x72, 0x6f, 0xda, 0x58, 0xad, 0x2d, 0xb5, 0xe0, 0x26, 0xe4, 0xfb, 0x39,
	0xe7, 0x70, 0x0e, 0xdf, 0x45, 0xff, 0x13, 0xca, 0xc1, 0x8e, 0xdd, 0xec, 0x92, 0x42, 0x37, 0x66,
	0x01, 0x8d, 0xb8, 0x1d, 0xb3, 0x84, 0xc9, 0xcf, 0xe9, 0x30, 0x04, 0x1a, 0x85, 0x1c, 0x48, 0x9a,
	0x31, 0x60, 0xf8, 0x8f, 0x9f, 0xb1, 0xab, 0xc8, 0xf5, 0x38, 0xa1, 0x29, 0x0f, 0x23, 0x96, 0x10,
	0x81, 0x26, 0x05, 0xba, 0x00, 0x13, 0x81, 0x6b, 0xff, 0x5d, 0xc7, 0xba, 0x1f, 0xf2, 0x34, 0x07,
	0x5a, 0x70, 0xb6, 0xad, 0x75, 0xab, 0x07, 0xb2, 0x5d, 0x6c, 0x76, 0x9e, 0x14, 0x54, 0xef, 0xe5,
	0x37, 0x34, 0xc3, 0x18, 0xa9, 0x89, 0x1b, 0x53, 0x5d, 0x31, 0x15, 0xeb, 0x9b, 0x23, 0xff, 0xb1,
	0x8e, 0x1a, 0x9e, 0x18, 0xf6, 0x03, 0xbd, 0x6a, 0x2a, 0x96, 0xea, 0xcc, 0x4b, 0xfc, 0x0b, 0x69,
	0x1c, 0x5c, 0xc8, 0xb9, 0x5e, 0x93, 0xfb, 0xb3, 0x4a, 0x20, 0xdc, 0x20, 0xc8, 0x28, 0xe7, 0xba,
	0x2a, 0x07, 0xf3, 0x12, 0xff, 0x46, 0xdf, 0x5d, 0x1f, 0xc2, 0x11, 0x1d, 0x64, 0x81, 0x64, 0xac,
	0x9b, 0x35, 0x4b, 0x75, 0xde, 0x36, 0xf1, 0x3f, 0xf4, 0xd3, 0x67, 0x71, 0x1a, 0x51, 0xa0, 0xc1,
	0x7c, 0x51, 0x93, 0x8b, 0x4b, 0x7d, 0x6c, 0xa2, 0x96, 0xcf, 0x12, 0x70, 0x7d, 0xe8, 0x27, 0xe7,
	0x4c, 0x6f, 0x48, 0xbd, 0xc5, 0x56, 0xe7, 0xbe, 0x8a, 0xb4, 0x23, 0x1a, 0x45, 0x2b, 0xec, 0xb5,
	0x51, 0x93, 0xcb, 0x69, 0xe9, 0xaf, 0xac, 0xbf, 0xcc, 0xe0, 0x00, 0xb5, 0x8a, 0x46, 0x1f, 0x68,
	0xcc, 0xa5, 0xb7, 0xd6, 0x4e, 0x97, 0x6c, 0x78, 0x04, 0x44, 0xa0, 0x9c, 0x45, 0x86, 0x0f, 0x13,
	0x6b, 0x6c, 0x96, 0x58, 0x73, 0x39, 0xb1, 0xdb, 0x2a, 0xaa, 0x9f, 0x30, 0x58, 0x7d, 0x0f, 0x23,
	0x31, 0x7c, 0xbd, 0x87, 0x59, 0xb9, 0x45, 0x5c, 0x65, 0x10, 0x42, 0x8e, 0xcb, 0xb0, 0x3e, 0x13,
	0x84, 0x40, 0x39, 0x8b, 0x0c, 0xf8, 0x18, 0xfd, 0x28, 0x0d, 0x17, 0x9c, 0xda, 0x36, 0x9c, 0xef,
	0x48, 0x7a, 0x87, 0x0f, 0x13, 0x43, 0x19, 0x4f, 0x0c, 0xe5, 0x79, 0x62, 0x28, 0x77, 0x53, 0xa3,
	0x32, 0x9e, 0x1a, 0x95, 0xc7, 0xa9, 0x51, 0x39, 0xdb, 0xbb, 0x08, 0x61, 0x98, 0x7b, 0xc4, 0x67,
	0xb1, 0x2d, 0x24, 0xba, 0x42, 0xc3, 0x9e, 0x69, 0xd8, 0xd7, 0xf6, 0x8a, 0x47, 0xe8, 0x69, 0xf2,
	0xe9, 0xed, 0xbe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x68, 0xf5, 0xca, 0x18, 0x27, 0x04, 0x00, 0x00,
}

func (m *Buyer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Buyer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Buyer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContactInfo) > 0 {
		i -= len(m.ContactInfo)
		copy(dAtA[i:], m.ContactInfo)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.ContactInfo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CompletedOrderId) > 0 {
		dAtA2 := make([]byte, len(m.CompletedOrderId)*10)
		var j1 int
		for _, num := range m.CompletedOrderId {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ActiveOrderId) > 0 {
		dAtA4 := make([]byte, len(m.ActiveOrderId)*10)
		var j3 int
		for _, num := range m.ActiveOrderId {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BuyerId != 0 {
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(m.BuyerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Seller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Seller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Seller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContactInfo) > 0 {
		i -= len(m.ContactInfo)
		copy(dAtA[i:], m.ContactInfo)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.ContactInfo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CompletedOrderId) > 0 {
		dAtA6 := make([]byte, len(m.CompletedOrderId)*10)
		var j5 int
		for _, num := range m.CompletedOrderId {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ActiveItems) > 0 {
		for iNdEx := len(m.ActiveItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActiveItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonoWhitelist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ActiveOrderId) > 0 {
		dAtA8 := make([]byte, len(m.ActiveOrderId)*10)
		var j7 int
		for _, num := range m.ActiveOrderId {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SellerId != 0 {
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Voter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Voter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Voter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompletedVotes) > 0 {
		for iNdEx := len(m.CompletedVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonoWhitelist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ActiveVotes) > 0 {
		for iNdEx := len(m.ActiveVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActiveVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonoWhitelist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VoterId != 0 {
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(m.VoterId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonoWhitelist(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonoWhitelist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Buyer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	if m.BuyerId != 0 {
		n += 1 + sovMonoWhitelist(uint64(m.BuyerId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	if len(m.ActiveOrderId) > 0 {
		l = 0
		for _, e := range m.ActiveOrderId {
			l += sovMonoWhitelist(uint64(e))
		}
		n += 1 + sovMonoWhitelist(uint64(l)) + l
	}
	if len(m.CompletedOrderId) > 0 {
		l = 0
		for _, e := range m.CompletedOrderId {
			l += sovMonoWhitelist(uint64(e))
		}
		n += 1 + sovMonoWhitelist(uint64(l)) + l
	}
	l = len(m.ContactInfo)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	return n
}

func (m *Seller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	if m.SellerId != 0 {
		n += 1 + sovMonoWhitelist(uint64(m.SellerId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	if len(m.ActiveOrderId) > 0 {
		l = 0
		for _, e := range m.ActiveOrderId {
			l += sovMonoWhitelist(uint64(e))
		}
		n += 1 + sovMonoWhitelist(uint64(l)) + l
	}
	if len(m.ActiveItems) > 0 {
		for _, e := range m.ActiveItems {
			l = e.Size()
			n += 1 + l + sovMonoWhitelist(uint64(l))
		}
	}
	if len(m.CompletedOrderId) > 0 {
		l = 0
		for _, e := range m.CompletedOrderId {
			l += sovMonoWhitelist(uint64(e))
		}
		n += 1 + sovMonoWhitelist(uint64(l)) + l
	}
	l = len(m.ContactInfo)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	return n
}

func (m *Voter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	if m.VoterId != 0 {
		n += 1 + sovMonoWhitelist(uint64(m.VoterId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	if len(m.ActiveVotes) > 0 {
		for _, e := range m.ActiveVotes {
			l = e.Size()
			n += 1 + l + sovMonoWhitelist(uint64(l))
		}
	}
	if len(m.CompletedVotes) > 0 {
		for _, e := range m.CompletedVotes {
			l = e.Size()
			n += 1 + l + sovMonoWhitelist(uint64(l))
		}
	}
	return n
}

func sovMonoWhitelist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonoWhitelist(x uint64) (n int) {
	return sovMonoWhitelist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Buyer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Buyer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Buyer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			m.BuyerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonoWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveOrderId = append(m.ActiveOrderId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonoWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonoWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonoWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActiveOrderId) == 0 {
					m.ActiveOrderId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonoWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveOrderId = append(m.ActiveOrderId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveOrderId", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonoWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompletedOrderId = append(m.CompletedOrderId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonoWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonoWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonoWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompletedOrderId) == 0 {
					m.CompletedOrderId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonoWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompletedOrderId = append(m.CompletedOrderId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedOrderId", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Seller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Seller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Seller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonoWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveOrderId = append(m.ActiveOrderId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonoWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonoWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonoWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActiveOrderId) == 0 {
					m.ActiveOrderId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonoWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveOrderId = append(m.ActiveOrderId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveOrderId", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveItems = append(m.ActiveItems, &Item{})
			if err := m.ActiveItems[len(m.ActiveItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonoWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompletedOrderId = append(m.CompletedOrderId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonoWhitelist
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonoWhitelist
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonoWhitelist
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompletedOrderId) == 0 {
					m.CompletedOrderId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonoWhitelist
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompletedOrderId = append(m.CompletedOrderId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedOrderId", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Voter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Voter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Voter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			m.VoterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveVotes = append(m.ActiveVotes, &Vote{})
			if err := m.ActiveVotes[len(m.ActiveVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedVotes = append(m.CompletedVotes, &Vote{})
			if err := m.CompletedVotes[len(m.CompletedVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonoWhitelist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonoWhitelist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonoWhitelist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonoWhitelist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonoWhitelist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonoWhitelist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonoWhitelist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonoWhitelist = fmt.Errorf("proto: unexpected end of group")
)
