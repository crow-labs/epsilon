// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nest/market-models/mono/monoDispute.proto

package mono

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Evidence defines evidence for a dispute/rebutal in the mono marketplace
type Evidence struct {
	EvidenceId   string `protobuf:"bytes,1,opt,name=evidenceId,proto3" json:"evidenceId,omitempty"`
	DisputeId    string `protobuf:"bytes,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	ExternalLink string `protobuf:"bytes,3,opt,name=externalLink,proto3" json:"externalLink,omitempty"`
}

func (m *Evidence) Reset()         { *m = Evidence{} }
func (m *Evidence) String() string { return proto.CompactTextString(m) }
func (*Evidence) ProtoMessage()    {}
func (*Evidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{0}
}
func (m *Evidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Evidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Evidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Evidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Evidence.Merge(m, src)
}
func (m *Evidence) XXX_Size() int {
	return m.Size()
}
func (m *Evidence) XXX_DiscardUnknown() {
	xxx_messageInfo_Evidence.DiscardUnknown(m)
}

var xxx_messageInfo_Evidence proto.InternalMessageInfo

func (m *Evidence) GetEvidenceId() string {
	if m != nil {
		return m.EvidenceId
	}
	return ""
}

func (m *Evidence) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *Evidence) GetExternalLink() string {
	if m != nil {
		return m.ExternalLink
	}
	return ""
}

//Rebuttal defines the rebutal for a raised dispute in the mono marketplace
type Rebuttal struct {
	RebuttalId string `protobuf:"bytes,1,opt,name=rebuttalId,proto3" json:"rebuttalId,omitempty"`
	DisputeId  string `protobuf:"bytes,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	EvidenceId string `protobuf:"bytes,3,opt,name=evidenceId,proto3" json:"evidenceId,omitempty"`
}

func (m *Rebuttal) Reset()         { *m = Rebuttal{} }
func (m *Rebuttal) String() string { return proto.CompactTextString(m) }
func (*Rebuttal) ProtoMessage()    {}
func (*Rebuttal) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{1}
}
func (m *Rebuttal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rebuttal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rebuttal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rebuttal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rebuttal.Merge(m, src)
}
func (m *Rebuttal) XXX_Size() int {
	return m.Size()
}
func (m *Rebuttal) XXX_DiscardUnknown() {
	xxx_messageInfo_Rebuttal.DiscardUnknown(m)
}

var xxx_messageInfo_Rebuttal proto.InternalMessageInfo

func (m *Rebuttal) GetRebuttalId() string {
	if m != nil {
		return m.RebuttalId
	}
	return ""
}

func (m *Rebuttal) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *Rebuttal) GetEvidenceId() string {
	if m != nil {
		return m.EvidenceId
	}
	return ""
}

//Dispute defines a dispute over a mono markeplace exchange of physical goods
type Dispute struct {
	DisputeId   string `protobuf:"bytes,1,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	EvidenceId  string `protobuf:"bytes,4,opt,name=evidenceId,proto3" json:"evidenceId,omitempty"`
}

func (m *Dispute) Reset()         { *m = Dispute{} }
func (m *Dispute) String() string { return proto.CompactTextString(m) }
func (*Dispute) ProtoMessage()    {}
func (*Dispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{2}
}
func (m *Dispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dispute.Merge(m, src)
}
func (m *Dispute) XXX_Size() int {
	return m.Size()
}
func (m *Dispute) XXX_DiscardUnknown() {
	xxx_messageInfo_Dispute.DiscardUnknown(m)
}

var xxx_messageInfo_Dispute proto.InternalMessageInfo

func (m *Dispute) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *Dispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Dispute) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dispute) GetEvidenceId() string {
	if m != nil {
		return m.EvidenceId
	}
	return ""
}

// Sentence defines the outcome of a dispute
type Sentence struct {
	VoteId               string `protobuf:"bytes,1,opt,name=voteId,proto3" json:"voteId,omitempty"`
	PlaintifGuilty       bool   `protobuf:"varint,2,opt,name=plaintifGuilty,proto3" json:"plaintifGuilty,omitempty"`
	DefendantGuilty      bool   `protobuf:"varint,3,opt,name=defendantGuilty,proto3" json:"defendantGuilty,omitempty"`
	PlaintifBlacklisted  bool   `protobuf:"varint,4,opt,name=plaintifBlacklisted,proto3" json:"plaintifBlacklisted,omitempty"`
	DefendantBlacklisted bool   `protobuf:"varint,5,opt,name=defendantBlacklisted,proto3" json:"defendantBlacklisted,omitempty"`
	PlaintifJailTime     uint64 `protobuf:"varint,6,opt,name=plaintifJailTime,proto3" json:"plaintifJailTime,omitempty"`
	DefendantJailTime    uint64 `protobuf:"varint,7,opt,name=defendantJailTime,proto3" json:"defendantJailTime,omitempty"`
	AmountToReturn       uint64 `protobuf:"varint,8,opt,name=amountToReturn,proto3" json:"amountToReturn,omitempty"`
}

func (m *Sentence) Reset()         { *m = Sentence{} }
func (m *Sentence) String() string { return proto.CompactTextString(m) }
func (*Sentence) ProtoMessage()    {}
func (*Sentence) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{3}
}
func (m *Sentence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sentence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sentence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sentence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sentence.Merge(m, src)
}
func (m *Sentence) XXX_Size() int {
	return m.Size()
}
func (m *Sentence) XXX_DiscardUnknown() {
	xxx_messageInfo_Sentence.DiscardUnknown(m)
}

var xxx_messageInfo_Sentence proto.InternalMessageInfo

func (m *Sentence) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

func (m *Sentence) GetPlaintifGuilty() bool {
	if m != nil {
		return m.PlaintifGuilty
	}
	return false
}

func (m *Sentence) GetDefendantGuilty() bool {
	if m != nil {
		return m.DefendantGuilty
	}
	return false
}

func (m *Sentence) GetPlaintifBlacklisted() bool {
	if m != nil {
		return m.PlaintifBlacklisted
	}
	return false
}

func (m *Sentence) GetDefendantBlacklisted() bool {
	if m != nil {
		return m.DefendantBlacklisted
	}
	return false
}

func (m *Sentence) GetPlaintifJailTime() uint64 {
	if m != nil {
		return m.PlaintifJailTime
	}
	return 0
}

func (m *Sentence) GetDefendantJailTime() uint64 {
	if m != nil {
		return m.DefendantJailTime
	}
	return 0
}

func (m *Sentence) GetAmountToReturn() uint64 {
	if m != nil {
		return m.AmountToReturn
	}
	return 0
}

// Vote defines the vote that is cast for a MonoDispute
type Vote struct {
	VoteId    string    `protobuf:"bytes,1,opt,name=voteId,proto3" json:"voteId,omitempty"`
	VoterId   string    `protobuf:"bytes,2,opt,name=voterId,proto3" json:"voterId,omitempty"`
	DisputeId string    `protobuf:"bytes,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	VoteInfo  *Sentence `protobuf:"bytes,4,opt,name=voteInfo,proto3" json:"voteInfo,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_1be600aaa49bca9e, []int{4}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

func (m *Vote) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

func (m *Vote) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *Vote) GetVoteInfo() *Sentence {
	if m != nil {
		return m.VoteInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*Evidence)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Evidence")
	proto.RegisterType((*Rebuttal)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Rebuttal")
	proto.RegisterType((*Dispute)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Dispute")
	proto.RegisterType((*Sentence)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Sentence")
	proto.RegisterType((*Vote)(nil), "crowlabs.epsilon.nest.marketmodels.mono.Vote")
}

func init() {
	proto.RegisterFile("nest/market-models/mono/monoDispute.proto", fileDescriptor_1be600aaa49bca9e)
}

var fileDescriptor_1be600aaa49bca9e = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x9b, 0x34, 0x71, 0xa7, 0x88, 0x9f, 0x25, 0x42, 0x56, 0x85, 0xac, 0x28, 0x07, 0x08,
	0x88, 0xda, 0xa4, 0x48, 0x3c, 0x40, 0x05, 0x42, 0x45, 0x20, 0x21, 0x53, 0x71, 0xe0, 0xb6, 0xb6,
	0x27, 0xe9, 0x2a, 0xeb, 0xdd, 0xc8, 0x1e, 0x87, 0x72, 0xe2, 0x15, 0x78, 0x09, 0xde, 0x85, 0x63,
	0x8f, 0x1c, 0x38, 0xa0, 0xe4, 0x45, 0x90, 0xd7, 0xce, 0x9f, 0xd3, 0x0a, 0x2e, 0xd1, 0xec, 0x37,
	0xf3, 0xfd, 0x68, 0xb2, 0x6b, 0x78, 0xa2, 0x30, 0x23, 0x3f, 0xe1, 0xe9, 0x04, 0xe9, 0x38, 0xd1,
	0x31, 0xca, 0xcc, 0x4f, 0xb4, 0xd2, 0xe6, 0xe7, 0x95, 0xc8, 0xa6, 0x39, 0xa1, 0x37, 0x4d, 0x35,
	0x69, 0xf6, 0x38, 0x4a, 0xf5, 0x17, 0xc9, 0xc3, 0xcc, 0xc3, 0x69, 0x26, 0xa4, 0x56, 0x5e, 0xc1,
	0xf5, 0x4a, 0x6e, 0x49, 0xf5, 0x0a, 0xd6, 0x91, 0x1b, 0xe9, 0x2c, 0xd1, 0x99, 0x1f, 0xf2, 0x0c,
	0xfd, 0xd9, 0x30, 0x44, 0xe2, 0x43, 0x3f, 0xd2, 0x42, 0x95, 0x42, 0x47, 0xdd, 0xb1, 0x1e, 0x6b,
	0x53, 0xfa, 0x45, 0x55, 0xa2, 0x7d, 0x09, 0xf6, 0xeb, 0x99, 0x88, 0x51, 0x45, 0xc8, 0x5c, 0x00,
	0xac, 0xea, 0xb3, 0xd8, 0xb1, 0x7a, 0xd6, 0xe0, 0x20, 0xd8, 0x40, 0xd8, 0x43, 0x38, 0x88, 0xcb,
	0x6c, 0x67, 0xb1, 0xb3, 0x67, 0xda, 0x6b, 0x80, 0xf5, 0xe1, 0x16, 0x5e, 0x12, 0xa6, 0x8a, 0xcb,
	0x77, 0x42, 0x4d, 0x9c, 0xa6, 0x19, 0xd8, 0xc2, 0xfa, 0x17, 0x60, 0x07, 0x18, 0xe6, 0x44, 0x5c,
	0x16, 0x6e, 0x69, 0x55, 0xaf, 0xdd, 0xd6, 0xc8, 0x3f, 0xdc, 0xb6, 0xb3, 0x36, 0xeb, 0x59, 0xfb,
	0xdf, 0xa0, 0x53, 0xed, 0x71, 0x5b, 0xc8, 0xaa, 0x0b, 0x75, 0x61, 0x9f, 0x04, 0x49, 0xac, 0x2c,
	0xca, 0x03, 0xeb, 0xc1, 0x61, 0x8c, 0x59, 0x94, 0x8a, 0x29, 0x09, 0xad, 0x2a, 0xfd, 0x4d, 0xa8,
	0x16, 0xa0, 0xb5, 0x13, 0xe0, 0xf7, 0x1e, 0xd8, 0x1f, 0x51, 0x91, 0xd9, 0xec, 0x03, 0x68, 0xcf,
	0xf4, 0x86, 0x7f, 0x75, 0x62, 0x8f, 0xe0, 0xf6, 0x54, 0x72, 0xa1, 0x48, 0x8c, 0xde, 0xe4, 0x42,
	0xd2, 0x57, 0x93, 0xc2, 0x0e, 0x6a, 0x28, 0x1b, 0xc0, 0x9d, 0x18, 0x47, 0xa8, 0x62, 0xae, 0xa8,
	0x1a, 0x6c, 0x9a, 0xc1, 0x3a, 0xcc, 0x9e, 0xc3, 0xfd, 0x25, 0xf7, 0x54, 0xf2, 0x68, 0x22, 0x45,
	0x46, 0x58, 0xe6, 0xb3, 0x83, 0xeb, 0x5a, 0xec, 0x04, 0xba, 0x2b, 0x91, 0x4d, 0xca, 0xbe, 0xa1,
	0x5c, 0xdb, 0x63, 0x4f, 0xe1, 0xee, 0x52, 0xea, 0x2d, 0x17, 0xf2, 0x5c, 0x24, 0xe8, 0xb4, 0x7b,
	0xd6, 0xa0, 0x15, 0xec, 0xe0, 0xec, 0x19, 0xdc, 0x5b, 0x69, 0xac, 0x86, 0x3b, 0x66, 0x78, 0xb7,
	0x51, 0x6c, 0x84, 0x27, 0x3a, 0x57, 0x74, 0xae, 0x03, 0xa4, 0x3c, 0x55, 0x8e, 0x6d, 0x46, 0x6b,
	0x68, 0xff, 0x87, 0x05, 0xad, 0x4f, 0x9a, 0x6e, 0x5e, 0xad, 0x03, 0x9d, 0xa2, 0x4a, 0x57, 0x97,
	0x67, 0x79, 0xdc, 0xbe, 0x0f, 0xcd, 0xfa, 0x7d, 0x78, 0x0f, 0xb6, 0x51, 0x50, 0x23, 0x6d, 0xb6,
	0x76, 0x78, 0x32, 0xf4, 0xfe, 0xf3, 0x09, 0x7a, 0xcb, 0xff, 0x3b, 0x58, 0x49, 0x9c, 0x7e, 0xf8,
	0x39, 0x77, 0xad, 0xab, 0xb9, 0x6b, 0xfd, 0x99, 0xbb, 0xd6, 0xf7, 0x85, 0xdb, 0xb8, 0x5a, 0xb8,
	0x8d, 0x5f, 0x0b, 0xb7, 0xf1, 0xf9, 0xe5, 0x58, 0xd0, 0x45, 0x1e, 0x7a, 0x91, 0x4e, 0xfc, 0xc2,
	0xe0, 0xb8, 0x70, 0xf0, 0x2b, 0x07, 0xff, 0xd2, 0xbf, 0xe1, 0x13, 0x11, 0xb6, 0xcd, 0xc3, 0x7d,
	0xf1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xce, 0x42, 0x2b, 0x44, 0x04, 0x00, 0x00,
}

func (m *Evidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Evidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Evidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalLink) > 0 {
		i -= len(m.ExternalLink)
		copy(dAtA[i:], m.ExternalLink)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.ExternalLink)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EvidenceId) > 0 {
		i -= len(m.EvidenceId)
		copy(dAtA[i:], m.EvidenceId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.EvidenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rebuttal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rebuttal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rebuttal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvidenceId) > 0 {
		i -= len(m.EvidenceId)
		copy(dAtA[i:], m.EvidenceId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.EvidenceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RebuttalId) > 0 {
		i -= len(m.RebuttalId)
		copy(dAtA[i:], m.RebuttalId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.RebuttalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvidenceId) > 0 {
		i -= len(m.EvidenceId)
		copy(dAtA[i:], m.EvidenceId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.EvidenceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sentence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sentence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sentence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmountToReturn != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.AmountToReturn))
		i--
		dAtA[i] = 0x40
	}
	if m.DefendantJailTime != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.DefendantJailTime))
		i--
		dAtA[i] = 0x38
	}
	if m.PlaintifJailTime != 0 {
		i = encodeVarintMonoDispute(dAtA, i, uint64(m.PlaintifJailTime))
		i--
		dAtA[i] = 0x30
	}
	if m.DefendantBlacklisted {
		i--
		if m.DefendantBlacklisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.PlaintifBlacklisted {
		i--
		if m.PlaintifBlacklisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DefendantGuilty {
		i--
		if m.DefendantGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PlaintifGuilty {
		i--
		if m.PlaintifGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteInfo != nil {
		{
			size, err := m.VoteInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonoDispute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonoDispute(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonoDispute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Evidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EvidenceId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.ExternalLink)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func (m *Rebuttal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RebuttalId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.EvidenceId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func (m *Dispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.EvidenceId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func (m *Sentence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	if m.PlaintifGuilty {
		n += 2
	}
	if m.DefendantGuilty {
		n += 2
	}
	if m.PlaintifBlacklisted {
		n += 2
	}
	if m.DefendantBlacklisted {
		n += 2
	}
	if m.PlaintifJailTime != 0 {
		n += 1 + sovMonoDispute(uint64(m.PlaintifJailTime))
	}
	if m.DefendantJailTime != 0 {
		n += 1 + sovMonoDispute(uint64(m.DefendantJailTime))
	}
	if m.AmountToReturn != 0 {
		n += 1 + sovMonoDispute(uint64(m.AmountToReturn))
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	if m.VoteInfo != nil {
		l = m.VoteInfo.Size()
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func sovMonoDispute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonoDispute(x uint64) (n int) {
	return sovMonoDispute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Evidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Evidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Evidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rebuttal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rebuttal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rebuttal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebuttalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RebuttalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sentence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sentence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sentence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaintifGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlaintifGuilty = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendantGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefendantGuilty = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaintifBlacklisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlaintifBlacklisted = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendantBlacklisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefendantBlacklisted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaintifJailTime", wireType)
			}
			m.PlaintifJailTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlaintifJailTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendantJailTime", wireType)
			}
			m.DefendantJailTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefendantJailTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountToReturn", wireType)
			}
			m.AmountToReturn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountToReturn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoteInfo == nil {
				m.VoteInfo = &Sentence{}
			}
			if err := m.VoteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonoDispute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonoDispute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonoDispute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonoDispute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonoDispute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonoDispute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonoDispute = fmt.Errorf("proto: unexpected end of group")
)
